<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.app.mapper.main.StudyLogByBookMapper">
	<select id="getStudyLogByBook"
		resultType="com.example.app.domain.StudyLog">
		SELECT sl1.date, sl1.user_id, sl1.book_id,
		MAX(sl1.comment)
		AS comment, b.*,
		t2.sum_of_time,
		g.genre_name, t2.last_date
		FROM
		study_log sl1
		JOIN book b ON sl1.book_id = b.book_id
		JOIN genre g ON
		b.genre_id = g.genre_id
		JOIN (
		SELECT user_id, book_id, MAX(date) as
		last_date, SUM(time) as sum_of_time
		FROM study_log
		WHERE user_id =
		#{userId}
		GROUP BY user_id, book_id
		) t2
		ON sl1.user_id = t2.user_id AND
		sl1.book_id = t2.book_id AND sl1.date =
		t2.last_date
		WHERE sl1.user_id =
		#{userId} AND b.status = #{status}
		GROUP BY b.book_id, sl1.date,
		sl1.user_id,
		sl1.time, t2.sum_of_time
		ORDER BY last_date DESC;
	</select>
	<select id="getStudyLogByBookDays">
		WITH sl AS (
		SELECT user_id, book_id, MAX(date) as
		last_date, SUM(time) as sum_of_time
		FROM study_log
		WHERE user_id =
		#{userId} AND date >= DATE_SUB(CURDATE(), INTERVAL #{days}
		DAY)
		GROUP BY
		book_id
		),
		latest_comments AS (
		SELECT user_id, book_id, comment, date
		FROM study_log
		WHERE (user_id, date) IN (
		SELECT user_id, date
		FROM sl
		)
		)
		SELECT sl.last_date as date, sl.user_id, sl.book_id, lc.comment, b.*,
		sl.sum_of_time,
		g.genre_name, sl.last_date
		FROM sl
		JOIN latest_comments
		lc ON sl.user_id = lc.user_id AND sl.book_id =
		lc.book_id AND
		sl.last_date = lc.date
		JOIN book b ON sl.book_id = b.book_id
		JOIN genre
		g ON b.genre_id = g.genre_id
		WHERE sl.user_id = #{userId} AND b.status
		= #{status} AND sl.last_date >=
		DATE_SUB(CURDATE(), INTERVAL #{days}
		DAY)
		ORDER
		BY sl.last_date DESC;
	</select>
	<update id="updateBookStatus"
		parameterType="com.example.app.domain.StudyLog">
		UPDATE book SET status = #{status} WHERE book_id =
		#{bookId}
	</update>
	<insert id="insertStudyLog"
		parameterType="com.example.app.domain.StudyLog">
		INSERT INTO study_log(date, user_id, time, book_id,
		comment)
		VALUES(#{date}, #{userId}, #{time}, #{bookId}, #{comment})
	</insert>
	<select id="getStudyLogOfAGenre">
		SELECT
		sl.date,
		sl.time,
		b.book_name,
		SUM(sl.time) OVER
		(ORDER BY sl.date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT
		ROW) AS
		sum_of_time,
		sl.comment,
		g.genre_name
		FROM
		study_log sl
		JOIN
		book b ON
		sl.book_id = b.book_id
		JOIN
		genre g ON b.genre_id = g.genre_id
		WHERE
		g.genre_id = #{genreId} AND sl.user_id = #{userId}
		ORDER BY
		sl.date;
	</select>
		<select id="getStudyLogOfAGenreDays">
		SELECT
		sl.date,
		sl.time,
		b.book_name,
		SUM(sl.time) OVER (ORDER BY sl.date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT
		ROW) AS sum_of_time,
		sl.comment,
		g.genre_name
		FROM
		study_log sl
		JOIN
		book b ON sl.book_id = b.book_id
		JOIN
		genre g ON b.genre_id = g.genre_id
		WHERE
		g.genre_id = #{genreId}
		AND sl.user_id = #{userId}
		AND sl.date >= DATE_SUB(CURDATE(), INTERVAL #{days})
		ORDER BY
		sl.date;
	</select>
</mapper>
